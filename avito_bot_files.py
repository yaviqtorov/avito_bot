# === FILE: README.md ===
# Avito monitor bot ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞ —Å Avito –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

–®–∞–≥–∏ –ø–æ –∑–∞–ø—É—Å–∫—É (Windows):
1. –û—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ/CMD/PowerShell.
2. –°–æ–∑–¥–∞–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ):
   ```bash
   python -m venv venv
   ```
3. –ê–∫—Ç–∏–≤–∏—Ä—É–π –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
   - PowerShell:
     ```powershell
     .\venv\Scripts\Activate.ps1
     ```
     –ï—Å–ª–∏ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –ø—Ä–æ ExecutionPolicy ‚Äî –æ—Ç–∫—Ä–æ–π PowerShell –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω–∏:
     ```powershell
     Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
     ```
   - –∏–ª–∏ –≤ cmd:
     ```cmd
     venv\Scripts\activate.bat
     ```
4. –£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   ```bash
   pip install -r requirements.txt
   ```
5. –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª `config.py` –∏ –≤—Å—Ç–∞–≤—å —Ç—É–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN).
6. (–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –≤ `config.py` –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å `CHECK_INTERVAL` –¥–æ 60 (1 –º–∏–Ω—É—Ç–∞).
7. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞:
   ```bash
   python bot.py
   ```

–¢–µ—Å—Ç: –≤ Telegram –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞ Avito (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—É, —á—Ç–æ —Ç—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª). –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å. –ß–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç, –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ CHECK_INTERVAL) –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.


# === FILE: requirements.txt ===
aiogram
requests
beautifulsoup4
lxml

# === FILE: config.py ===
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
TOKEN = "7842845343:AAGCffg57oYZMSpw0X2iyjdQtBt2oVBl220"  # <-- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
DB_PATH = "avito_bot.db"
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å 60)
CHECK_INTERVAL = 60  # 30 –º–∏–Ω—É—Ç
# User-Agent –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
USER_AGENT = (
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0 Safari/537.36"
)


# === FILE: db.py ===
import sqlite3
from typing import List, Tuple, Dict


def get_conn(path: str = "avito_bot.db") -> sqlite3.Connection:
    conn = sqlite3.connect(path, check_same_thread=False)
    conn.execute("PRAGMA foreign_keys = ON")
    return conn


def init_db(conn: sqlite3.Connection) -> None:
    c = conn.cursor()
    c.execute(
        """
    CREATE TABLE IF NOT EXISTS searches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        link TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """
    )
    c.execute(
        """
    CREATE TABLE IF NOT EXISTS seen_ads (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        search_id INTEGER NOT NULL,
        ad_id TEXT NOT NULL,
        url TEXT,
        title TEXT,
        price TEXT,
        UNIQUE(search_id, ad_id),
        FOREIGN KEY(search_id) REFERENCES searches(id) ON DELETE CASCADE
    )
    """
    )
    conn.commit()


def add_search(conn: sqlite3.Connection, user_id: int, link: str) -> int:
    c = conn.cursor()
    c.execute("INSERT INTO searches (user_id, link) VALUES (?, ?)", (user_id, link))
    conn.commit()
    return c.lastrowid


def get_all_searches(conn: sqlite3.Connection) -> List[Tuple[int, int, str]]:
    c = conn.cursor()
    c.execute("SELECT id, user_id, link FROM searches")
    return c.fetchall()


def is_seen(conn: sqlite3.Connection, search_id: int, ad_id: str) -> bool:
    c = conn.cursor()
    c.execute("SELECT 1 FROM seen_ads WHERE search_id = ? AND ad_id = ?", (search_id, ad_id))
    return c.fetchone() is not None


def mark_seen(
    conn: sqlite3.Connection,
    search_id: int,
    ad_id: str,
    url: str = None,
    title: str = None,
    price: str = None,
) -> None:
    c = conn.cursor()
    c.execute(
        """
    INSERT OR IGNORE INTO seen_ads (search_id, ad_id, url, title, price)
    VALUES (?, ?, ?, ?, ?)
    """,
        (search_id, ad_id, url, title, price),
    )
    conn.commit()


# === FILE: avito_parser.py ===
import re
from bs4 import BeautifulSoup
from typing import List, Dict


def parse_avito_search(html: str) -> List[Dict]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ Avito.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {id, title, price, url}

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Avito –º–µ–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî —ç—Ç–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –º–Ω–æ–≥–∏—Ö
    —Å–ª—É—á–∞–µ–≤, –Ω–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ Playwright (—ç–º—É–ª—è—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞) ‚Äî —è –ø–æ–º–æ–≥—É.
    """
    soup = BeautifulSoup(html, "lxml")
    results = []
    seen = set()

    anchors = soup.find_all("a", href=True)
    for a in anchors:
        href = a["href"]
        if href.startswith("//"):
            href = "https:" + href
        elif href.startswith("/"):
            href = "https://www.avito.ru" + href

        if "avito.ru" not in href:
            continue

        m = re.search(r"(\d{6,})", href)
        if not m:
            continue
        ad_id = m.group(1)
        if ad_id in seen:
            continue

        title = a.get_text(strip=True)

        # –ò—â–µ–º —Ü–µ–Ω—É –≤–æ–∫—Ä—É–≥ —Å—Å—ã–ª–∫–∏ (–ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ DOM)
        price = None
        parent = a.parent
        for _ in range(4):
            if parent is None:
                break
            text = parent.get_text(" ", strip=True)
            p_match = re.search(r"(\d[\d\s\u00A0]*‚ÇΩ|\d[\d\s\u00A0]* —Ä—É–±\.?)", text)
            if p_match:
                price = p_match.group(0)
                break
            parent = parent.parent

        results.append({
            "id": ad_id,
            "title": title or "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)",
            "price": price or "(—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)",
            "url": href,
        })
        seen.add(ad_id)

    return results


# === FILE: bot.py ===
import asyncio
import logging
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

import config
import db
import avito_parser

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = db.get_conn(config.DB_PATH)

bot = Bot(token=config.TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –ê–≤–∏—Ç–æ ‚Äî —è –±—É–¥—É –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –µ—ë –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
    )


@dp.message()
async def handle_message(message: types.Message):
    text = (message.text or "").strip()
    if "avito.ru" in text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop)
        await asyncio.to_thread(db.add_search, conn, message.from_user.id, text)
        await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞ —Å avito.ru")


async def check_once_for_search(search_tuple):
    search_id, user_id, link = search_tuple
    try:
        resp = requests.get(link, headers={"User-Agent": config.USER_AGENT}, timeout=20)
        resp.raise_for_status()
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ %s: %s", link, e)
        return

    ads = avito_parser.parse_avito_search(resp.text)

    for ad in ads:
        seen = await asyncio.to_thread(db.is_seen, conn, search_id, ad["id"])
        if not seen:
            await asyncio.to_thread(db.mark_seen, conn, search_id, ad["id"], ad["url"], ad["title"], ad["price"])
            text = f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{ad['title']}\n{ad['price']}\n{ad['url']}"
            try:
                await bot.send_message(user_id, text)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)


async def monitor_loop():
    while True:
        searches = await asyncio.to_thread(db.get_all_searches, conn)
        if not searches:
            logger.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ ‚Äî –∂–¥—É %s —Å–µ–∫—É–Ω–¥", config.CHECK_INTERVAL)
        for search in searches:
            await check_once_for_search(search)
        await asyncio.sleep(config.CHECK_INTERVAL)


async def main():
    db.init_db(conn)
    # –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞
    asyncio.create_task(monitor_loop())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
